// <auto-generated />
using System;
using API.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20251011013341_ApiMigracion2")]
    partial class ApiMigracion2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.AsientoContable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReferenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoReferencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AsientosContables", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.CuentaContable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CuentaPadreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<bool>("EsDeMovimiento")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CuentaPadreId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CuentasContables", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.MovimientoContable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AsientoContableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CuentaContableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Haber")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AsientoContableId");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("MovimientosContables", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Carrito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carritos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.CarritoDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("CarritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarritoId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductoId");

                    b.ToTable("CarritosDetalles", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.CategoriaProducto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CategoriasProductos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ComprobanteVenta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("VentaId");

                    b.ToTable("ComprobantesVentas", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Cupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximoUsos")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontoFijo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoMinimoPedido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Porcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UsosActuales")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Cupones", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Descuento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MontoFijo")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Porcentaje")
                        .IsRequired()
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductoId");

                    b.ToTable("Descuentos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Inventario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CantidadDisponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CantidadReservada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductoId")
                        .IsUnique();

                    b.ToTable("Inventarios", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ListaDeseos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("ListasDeseos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ListaDeseosDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ListaDeseosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ListaDeseosId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ListasDeseosDetalles", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Moneda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EsActiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TasaCambio")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Monedas", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CuponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MonedaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CuponId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MonedaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.PedidoDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DescuentoAplicado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("DescuentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstadoLinea")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DescuentoId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PedidosDetalles", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MonedaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioCosto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MonedaId");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ProductoCategoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductosCategorias", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Venta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Consecutivo")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaConfirmacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UsuarioVendedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PedidoId")
                        .IsUnique();

                    b.HasIndex("UsuarioVendedorId");

                    b.ToTable("Ventas", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.VentaDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DescuentoAplicado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("VentaDetalles", (string)null);
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Permiso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Permisos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56b3924b-209b-40fb-9f31-ad75c12f4528"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            Descripcion = "Permite ver los usuarios existentes en el sistema y sus datos.",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8655),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8650),
                            Nombre = "Listar usuarios"
                        },
                        new
                        {
                            Id = new Guid("4129cf49-cc22-46a1-9625-501855f2da8b"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            Descripcion = "Permite ver, crear, modificar y eliminar usuarios en el sistema.",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8667),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8664),
                            Nombre = "Gestionar usuarios"
                        },
                        new
                        {
                            Id = new Guid("e36d283c-8b25-42b6-83bd-56edd953e770"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            Descripcion = "Permite ver los roles existentes en el sistema y sus datos.",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8674),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8672),
                            Nombre = "Listar roles"
                        },
                        new
                        {
                            Id = new Guid("90abf232-a641-478d-8720-f0ae49e8a306"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            Descripcion = "Permite ver, crear, modificar y eliminar roles en el sistema.",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8681),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8679),
                            Nombre = "Gestionar rol"
                        },
                        new
                        {
                            Id = new Guid("80abf232-a641-478d-8720-f0ae49e8a301"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            Descripcion = "Permite ver los productos existentes en el sistema y sus datos.",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8688),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8686),
                            Nombre = "Listar Productos"
                        },
                        new
                        {
                            Id = new Guid("80abf232-a641-478d-8720-f0ae49e8a302"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            Descripcion = "Permite ver, crear, modificar y eliminar productos en el sistema.",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8699),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8696),
                            Nombre = "Gestionar Productos"
                        });
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8370),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8319),
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336523"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8401),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8398),
                            Nombre = "Vendedor"
                        },
                        new
                        {
                            Id = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336524"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8408),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(8406),
                            Nombre = "Cliente"
                        });
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.RolPermiso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PermisoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PermisoId");

                    b.HasIndex("RolId", "PermisoId")
                        .IsUnique();

                    b.ToTable("RolPermiso", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56b3924b-209b-40fb-9f31-ad75c12f4528"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9103),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9099),
                            PermisoId = new Guid("56b3924b-209b-40fb-9f31-ad75c12f4528"),
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522")
                        },
                        new
                        {
                            Id = new Guid("4129cf49-cc22-46a1-9625-501855f2da8b"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9118),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9116),
                            PermisoId = new Guid("4129cf49-cc22-46a1-9625-501855f2da8b"),
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522")
                        },
                        new
                        {
                            Id = new Guid("e36d283c-8b25-42b6-83bd-56edd953e770"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9124),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9122),
                            PermisoId = new Guid("e36d283c-8b25-42b6-83bd-56edd953e770"),
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522")
                        },
                        new
                        {
                            Id = new Guid("90abf232-a641-478d-8720-f0ae49e8a306"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9130),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9128),
                            PermisoId = new Guid("90abf232-a641-478d-8720-f0ae49e8a306"),
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522")
                        },
                        new
                        {
                            Id = new Guid("80abf232-a641-478d-8720-f0ae49e8a301"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9136),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9134),
                            PermisoId = new Guid("80abf232-a641-478d-8720-f0ae49e8a301"),
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522")
                        },
                        new
                        {
                            Id = new Guid("80abf232-a641-478d-8720-f0ae49e8a302"),
                            ActualizadoPor = "",
                            CreadoPor = "",
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9145),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 475, DateTimeKind.Local).AddTicks(9142),
                            PermisoId = new Guid("80abf232-a641-478d-8720-f0ae49e8a302"),
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522")
                        });
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualizadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contrasenna")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DebeCambiarContrasenna")
                        .HasColumnType("bit");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("Nombre", "Apellidos")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("42717fb8-6e3f-4c94-b6b1-a88e8718d0a6"),
                            ActualizadoPor = "",
                            Apellidos = "1",
                            Contrasenna = "$2a$10$EixZaYVK1fsbw1Zfbx3OXePaWxn96p36Zf4d0xF4f5f5f5f5f5f5f",
                            Correo = "1@api.cu",
                            CreadoPor = "",
                            DebeCambiarContrasenna = false,
                            EsActivo = true,
                            FechaActualizado = new DateTime(2025, 10, 10, 21, 33, 41, 477, DateTimeKind.Local).AddTicks(2029),
                            FechaCreado = new DateTime(2025, 10, 10, 21, 33, 41, 477, DateTimeKind.Local).AddTicks(1990),
                            Nombre = "1",
                            RolId = new Guid("c0b7e3b3-a06e-4580-b985-bb2fc4336522"),
                            Username = "1"
                        });
                });

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.CuentaContable", b =>
                {
                    b.HasOne("API.Data.Entidades.Contabilidad.CuentaContable", "CuentaPadre")
                        .WithMany("SubCuentas")
                        .HasForeignKey("CuentaPadreId");

                    b.Navigation("CuentaPadre");
                });

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.MovimientoContable", b =>
                {
                    b.HasOne("API.Data.Entidades.Contabilidad.AsientoContable", "Asiento")
                        .WithMany("Movimientos")
                        .HasForeignKey("AsientoContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Contabilidad.CuentaContable", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asiento");

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Carrito", b =>
                {
                    b.HasOne("API.Data.Entidades.Seguridad.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.CarritoDetalle", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Carrito", "Carrito")
                        .WithMany("Detalles")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ComprobanteVenta", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Descuento", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Inventario", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithOne("Inventario")
                        .HasForeignKey("API.Data.Entidades.Gestion.Nomencladores.Inventario", "ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ListaDeseos", b =>
                {
                    b.HasOne("API.Data.Entidades.Seguridad.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ListaDeseosDetalle", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.ListaDeseos", "ListaDeseos")
                        .WithMany("Detalles")
                        .HasForeignKey("ListaDeseosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListaDeseos");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Pedido", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Cupon", "Cupon")
                        .WithMany()
                        .HasForeignKey("CuponId");

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("MonedaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Seguridad.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cupon");

                    b.Navigation("Moneda");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.PedidoDetalle", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Descuento", "Descuento")
                        .WithMany()
                        .HasForeignKey("DescuentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Pedido", "Pedido")
                        .WithMany("Detalles")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Descuento");

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Producto", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Moneda", "Moneda")
                        .WithMany("Productos")
                        .HasForeignKey("MonedaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moneda");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ProductoCategoria", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.CategoriaProducto", "Categoria")
                        .WithMany("ProductoCategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithMany("ProductoCategorias")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Venta", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Pedido", "Pedido")
                        .WithOne("Venta")
                        .HasForeignKey("API.Data.Entidades.Gestion.Nomencladores.Venta", "PedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Seguridad.Usuario", "UsuarioVendedor")
                        .WithMany()
                        .HasForeignKey("UsuarioVendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("UsuarioVendedor");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.VentaDetalle", b =>
                {
                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Gestion.Nomencladores.Venta", "Venta")
                        .WithMany("Detalles")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.RolPermiso", b =>
                {
                    b.HasOne("API.Data.Entidades.Seguridad.Permiso", "Permiso")
                        .WithMany("RolPermiso")
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entidades.Seguridad.Rol", "Rol")
                        .WithMany("RolPermiso")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Usuario", b =>
                {
                    b.HasOne("API.Data.Entidades.Seguridad.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.AsientoContable", b =>
                {
                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("API.Data.Entidades.Contabilidad.CuentaContable", b =>
                {
                    b.Navigation("SubCuentas");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Carrito", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.CategoriaProducto", b =>
                {
                    b.Navigation("ProductoCategorias");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.ListaDeseos", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Moneda", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Pedido", b =>
                {
                    b.Navigation("Detalles");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Producto", b =>
                {
                    b.Navigation("Inventario")
                        .IsRequired();

                    b.Navigation("ProductoCategorias");
                });

            modelBuilder.Entity("API.Data.Entidades.Gestion.Nomencladores.Venta", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Permiso", b =>
                {
                    b.Navigation("RolPermiso");
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Rol", b =>
                {
                    b.Navigation("RolPermiso");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("API.Data.Entidades.Seguridad.Usuario", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
